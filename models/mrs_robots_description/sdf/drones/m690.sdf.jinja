<?xml version="1.0" encoding="utf-8"?>
<sdf version='1.10'>

  {%- import 'mrs_robots_description/sdf/components/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/components/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 4.65 -%} {# [kg] #}
  {%- set body_radius = 0.1 -%} {# [m] #}
  {%- set body_height = 0.1 -%} {# [m] #}
  {%- set mass_prop = 0.02 -%} {# [kg] #}
  {%- set prop_radius = 0.2286 -%} {# [m] #}
  {%- set prop_height = 0.002 -%} {# [m] #}

  {%- set motor_mesh_z_offset = -0.012 -%} {# [m] #}
  {%- set rotor_x_offset = 0.245 -%} {# [m] #}
  {%- set rotor_y_offset = 0.26 -%} {# [m] #}
  {%- set rotor_z_offset = 0.052 -%} {# [m] #}

  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 12 -%} {# slowdown ratio, only affects simulation visuals #}
  {%- set motor_constant = '7.7e-5' -%} {# [N / (rad/s)^2], computed for hover thurst at ~0.49 throttle #}
  {%- set moment_constant = 0.07 -%} {# [m] ratio between rolling/pitching moment and yawing moment, increase for faster yaw #}
  {%- set time_constant_up = 0.0125 -%} {# [s] how fast props gain speed when throttle goes up #}
  {%- set time_constant_down = 0.025 -%} {# [s] how fast props lose speed when throttle goes down #}
  {%- set max_rot_velocity = 780 -%} {# [rad/s] max real propeller rotation velocity #}

  {# this should only affect agile drones #}
  {%- set rotor_drag_coefficient = '1.0e-4' -%} {# N / (m/s)^2 how much thrust is lost due to air drag #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%} {# N*m / (m/s^2) rolling moment caused by dragging propellers through the air during forward flight #}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.25 -%} {# [m] #}
  {%- set inertia_body_height = 0.05 -%} {# [m] #}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Frame parts {--> #}
  {%- set central_body_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_central_body.stl' -%}
  {%- set arm_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_arm.stl' -%}
  {%- set legs_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_legs.stl' -%}
  {# <!--}--> #}

  {# Motors and props {--> #}
  {%- set motor_top_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_motor_top_part.stl' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_propeller.stl' -%}
  {# <!--}--> #}

  {# Mounts {--> #}
  {%- set battery_mesh_file = 'model://mrs_robots_description/meshes/t_drones/m690b/t_drone_m690b_battery.stl' -%}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mirrored_mesh_scale = '1 -1 1' -%}
  {%- set mesh_scale_prop_ccw = '1 1 1' -%}
  {%- set mesh_scale_prop_cw = '-1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = mass_prop * ( 3 * prop_radius * prop_radius + prop_height * prop_height) / 12 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = mass_prop * ( 3 * prop_radius * prop_radius + prop_height * prop_height) / 12  -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = (mass_prop * prop_radius * prop_radius) / 2 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body visuals {-->

      <!-- Central board {-->
      {{ generic.visual_mesh_macro(
        name = 'central_board',
        mesh_file = central_body_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Arms {-->
      {{ generic.visual_mesh_macro(
        name = 'arm_back_right',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'arm_back_left',
        mesh_file = arm_mesh_file,
        mesh_scale = mirrored_mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'arm_front_left',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(180))
      }}

      {{ generic.visual_mesh_macro(
        name = 'arm_front_right',
        mesh_file = arm_mesh_file,
        mesh_scale = mirrored_mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(180))
      }}
      <!--}-->

      <!-- Legs {-->
      {{ generic.visual_mesh_macro(
        name = 'legs',
        mesh_file = legs_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.collision_cylinder_macro(
        name = 'leg_right',
        collision_length = 0.3,
        collision_radius = 0.01,
        x = 0,
        y = 0.165,
        z = -0.258,
        roll = 0,
        pitch = -math.radians(90),
        yaw = 0)
      }}

      {{ generic.collision_cylinder_macro(
        name = 'leg_left',
        collision_length = 0.3,
        collision_radius = 0.01,
        x = 0,
        y = -0.165,
        z = -0.258,
        roll = 0,
        pitch = -math.radians(90),
        yaw = 0)
      }}

      <!--}-->

      <!-- Battery {-->
      {{ generic.visual_mesh_macro(
        name = 'battery',
        mesh_file = battery_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!--}-->

    <!-- Body physics {-->
    {{ generic.multirotor_physics_macro(
      mass = mass,
      body_radius = body_radius,
      body_height = body_height,
      ixx = body_ixx,
      ixy = body_ixy,
      ixz = body_ixz,
      iyy = body_iyy,
      iyz = body_iyz,
      izz = body_izz)
    }}
    <!--}-->

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

      <!-- PX4 sensors {-->

      <!-- barometer {-->
      <!-- Noise modeled after BMP390 -->
      {{ generic.barometer_sensor_macro(
        name = "air_pressure",
        update_rate = 50,
        noise_mean = 0,
        noise_std = 3)
      }}
      <!--}-->

      <!-- magnetometer {-->
      <!-- Noise modeled after IIS2MDC -->
      {{ generic.magnetometer_sensor_macro(
        name = "magnetometer",
        update_rate = 100,
        noise_std_x = 0.0001,
        noise_std_y = 0.0001,
        noise_std_z = 0.0001)
      }}
      <!--}-->

      <!-- GPS {-->
      {{ generic.gps_sensor_macro(
        name = "navsat",
        update_rate = 10)
      }}
      <!--}-->

      <!-- IMU {-->
      <!-- Noise modeled after IIM42653 -->
      {{ generic.imu_sensor_macro(
        name = "imu",
        update_rate = 250,
        angular_velocity_noise_mean_x = 0.0,
        angular_velocity_noise_std_x = 0.0008726646,
        angular_velocity_noise_mean_y = 0.0,
        angular_velocity_noise_std_y = 0.0008726646,
        angular_velocity_noise_mean_z = 0.0,
        angular_velocity_noise_std_z = 0.0008726646,
        linear_acceleration_noise_mean_x = 0.0,
        linear_acceleration_noise_std_x = 0.00637,
        linear_acceleration_noise_mean_y = 0.0,
        linear_acceleration_noise_std_y = 0.00637,
        linear_acceleration_noise_mean_z = 0.0,
        linear_acceleration_noise_std_z = 0.00686)
      }}
      <!--}-->

      <!--}-->

    </link>

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': rotor_x_offset,
    'y': -rotor_y_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 1,
    'direction': 'ccw',
    'x': -rotor_x_offset,
    'y': rotor_y_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 2,
    'direction': 'cw',
    'x': rotor_x_offset,
    'y': rotor_y_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -rotor_x_offset,
    'y': -rotor_y_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = prop_radius,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = motor_mesh_z_offset,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ================================================================== #}
    {# ||                 optional sensor definitions                  || #}
    {# ================================================================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = -0.05,
      y = 0.0,
      z = -0.055,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}

    {# <!--}--> #}

  </model>
</sdf>
