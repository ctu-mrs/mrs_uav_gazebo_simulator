<?xml version="1.0" encoding="utf-8"?>
<sdf version='1.10'>

  {%- import 'mrs_robots_description/sdf/components/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/components/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 1.35 -%} {# [kg] #}
  {%- set body_radius = 0.08 -%} {# [m] #}
  {%- set body_height = 0.07 -%} {# [m] #}
  {%- set mass_prop = 0.005 -%} {# [kg] #}
  {%- set prop_radius = 0.093 -%} {# [m] #}
  {%- set prop_height = 0.002 -%} {# [m] #}
  {%- set rotor_offset_top = 0.017 -%} {# [m] #}
  {%- set prop_offset_top = 0.035 -%} {# [m] #}
  {%- set arm_length = 0.165 -%} {# [m] #}
  {%- set board_radius = 0.065 -%} {# [m] #}
  {%- set board_height = 0.002 -%} {# [m] #}
  {%- set holder_offset = 0.02 -%} {# [m] #}
  {%- set leg_offset_z = 0.098 -%} {# [m] #}
  {%- set leg_offset_r = 0.0072 -%} {# [m] #}
  {%- set leg_radius = 0.006 -%} {# [m] #}
  {%- set leg_height = 0.11 -%} {# [m] #}
  {%- set pixhawk_offset = 0.0073 -%} {# [m] #}
  {%- set use_battery_mount = true -%} {# [bool] #}
  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 18 -%}
  {%- set motor_constant = '6.05e-6' -%} {# [N / (rad/s)^2], computed for hover thrust at ~0.5 throttle #}
  {%- set moment_constant = 0.06 -%} {# [m] ratio between rolling/pitching moment and yawing moment, increase for faster yaw #}
  {%- set time_constant_up = 0.0125 -%} {# [s] how fast props gain speed when throttle goes up #}
  {%- set time_constant_down = 0.025 -%} {# [s] how fast props lose speed when throttle goes down #}
  {%- set max_rot_velocity = 1400 -%} {# [rad/s] #}

  {# this should only affect agile drones #}
  {%- set rotor_drag_coefficient = '1.0e-4' -%} {# N / (m/s)^2 how much thrust is lost due to air drag #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%} {# N*m / (m/s^2) rolling moment caused by dragging propellers through the air during forward flight #}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.2 -%} {# [m] #}
  {%- set inertia_body_height = 0.075 -%} {# [m] #}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Drone parts {--> #}
  {%- set central_board_mesh_top = 'model://mrs_robots_description/meshes/dji/f330/f330_top_board.dae' -%}
  {%- set central_board_mesh_bottom = 'model://mrs_robots_description/meshes/dji/f330/f330_bottom_board.dae' -%}
  {%- set arm_mesh_file = 'model://mrs_robots_description/meshes/dji/f330/f330_arm.dae' -%}
  {%- set leg_mesh_file = 'model://mrs_robots_description/meshes/dji/f330/f330_leg_110mm.dae'-%}
  {%- set motor_mesh_file = 'model://mrs_robots_description/meshes/dji/f330/f330_rotor.dae' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/dji/f330/f330_prop.dae'-%}
  {%- set pixhawk_mesh_file = 'model://mrs_robots_description/meshes/sensors/pixhawk.dae' -%}
  {%- set nuc_mesh_file = 'model://mrs_robots_description/meshes/dji/f330/f330_nuc.dae' -%}
  {# <!--}--> #}

  {# Mounts {--> #}
  {%- set battery_mount_mesh = 'model://mrs_robots_description/meshes/dji/f330/f330_battery_holder.dae' -%}
  {%- set bluefox_mount_mesh = 'model://mrs_robots_description/meshes/dji/f330/f330_bluefox_holder.dae' -%}
  {%- set compton_mount_mesh = 'model://mrs_robots_description/meshes/dji/f330/f330_compton_holder.dae' -%}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mesh_scale_prop_ccw = '1 1 1' -%}
  {%- set mesh_scale_prop_cw = '-1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = mass_prop * ( 3 * prop_radius * prop_radius + prop_height * prop_height) / 12 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = mass_prop * ( 3 * prop_radius * prop_radius + prop_height * prop_height) / 12  -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = (mass_prop * prop_radius * prop_radius) / 2 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body visuals {-->

      <!-- Boards {-->
      {{ generic.visual_mesh_macro(
        name = 'lower_central_board',
        mesh_file = central_board_mesh_bottom,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0.001,
        roll = 0,
        pitch = 0,
        yaw = -math.radians(90))
      }}

      {{ generic.visual_mesh_macro(
        name = 'upper_central_board',
        mesh_file = central_board_mesh_top,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = -math.radians(90))
      }}
      <!--}-->

      <!-- Arms {-->
      {{ generic.visual_mesh_macro(
        name = 'front_right_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-135))
      }}

      {{ generic.visual_mesh_macro(
        name = 'front_left_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(135))
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_right_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(45))
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_left_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-45))
      }}
      <!--}-->

      <!-- Intel NUC {-->
      {{ generic.visual_mesh_macro(
        name = 'NUC',
        mesh_file = nuc_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(270))
      }}
      <!--}-->

      <!-- Pixhawk {-->
      {{ generic.visual_mesh_macro(
        name = 'pixhawk',
        mesh_file = pixhawk_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = pixhawk_offset,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Legs {-->
      {{ generic.leg_collision_offset_macro(
        name = 'front_right_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = 0.008,
        roll = 0,
        pitch = 0,
        yaw = math.radians(135),
        collision_height = leg_height,
        collision_radius = leg_radius,
        offset_x = 0,
        offset_y = 0,
        offset_z = -0.055)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'front_left_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = 0.008,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-135),
        collision_height = leg_height,
        collision_radius = leg_radius,
        offset_x = 0,
        offset_y = 0,
        offset_z = -0.055)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'back_right_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = -arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = 0.008,
        roll = 0,
        pitch = 0,
        yaw = math.radians(45),
        collision_height = leg_height,
        collision_radius = leg_radius,
        offset_x = 0,
        offset_y = 0,
        offset_z = -0.055)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'back_left_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = -arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = 0.008,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-45),
        collision_height = leg_height,
        collision_radius = leg_radius,
        offset_x = 0,
        offset_y = 0,
        offset_z = -0.055)
      }}
      <!--}-->

      <!-- Motors {-->
      {{ generic.visual_mesh_macro(
        name = 'front_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = rotor_offset_top,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'front_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = rotor_offset_top,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = -arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = rotor_offset_top,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = -arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = rotor_offset_top,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Battery mount and battery {-->
      {{ generic.visual_mesh_macro(
        name = 'battery_mount',
        mesh_file = battery_mount_mesh,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = -math.radians(90))
      }}

      {{ generic.visual_colored_box_macro(
        name = 'battery',
        size_x = 0.134,
        size_y = 0.03,
        size_z = 0.04,
        color = 'Grey',
        x = -0.008,
        y = 0,
        z = 0.084,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      <!--}-->

      {# component mounts and holders (these must be passed as args into components, or must be called) {--> #}

      {# Bluefox mount front {--> #}
      {%- set bluefox_mount_front -%}
      {{ generic.visual_link_macro(
        name = 'bluefox_mount_front',
        mesh_file = bluefox_mount_mesh,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = math.radians(180),
        pitch = math.radians(180),
        yaw = math.radians(90),
        parent_link = root)
      }}
      {%- endset -%}
      {# <!--}--> #}

      {# <!--}--> #}

      <!--}-->

    <!-- Body physics {-->
    {{ generic.multirotor_physics_macro(
      mass = mass,
      body_radius = body_radius,
      body_height = body_height,
      ixx = body_ixx,
      ixy = body_ixy,
      ixz = body_ixz,
      iyy = body_iyy,
      iyz = body_iyz,
      izz = body_izz)
    }}
    <!--}-->

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

      <!-- PX4 sensors {-->

      <!-- barometer {-->
      <!-- Noise modeled after BMP390 -->
      {{ generic.barometer_sensor_macro(
        name = "air_pressure",
        update_rate = 50,
        noise_mean = 0,
        noise_std = 3)
      }}
      <!--}-->

      <!-- magnetometer {-->
      <!-- Noise modeled after IIS2MDC -->
      {{ generic.magnetometer_sensor_macro(
        name = "magnetometer",
        update_rate = 100,
        noise_std_x = 0.0001,
        noise_std_y = 0.0001,
        noise_std_z = 0.0001)
      }}
      <!--}-->

      <!-- GPS {-->
      {{ generic.gps_sensor_macro(
        name = "navsat",
        update_rate = 10)
      }}
      <!--}-->

      <!-- IMU {-->
      <!-- Noise modeled after IIM42653 -->
      {{ generic.imu_sensor_macro(
        name = "imu",
        update_rate = 250,
        angular_velocity_noise_mean_x = 0.0,
        angular_velocity_noise_std_x = 0.0008726646,
        angular_velocity_noise_mean_y = 0.0,
        angular_velocity_noise_std_y = 0.0008726646,
        angular_velocity_noise_mean_z = 0.0,
        angular_velocity_noise_std_z = 0.0008726646,
        linear_acceleration_noise_mean_x = 0.0,
        linear_acceleration_noise_std_x = 0.00637,
        linear_acceleration_noise_mean_y = 0.0,
        linear_acceleration_noise_std_y = 0.00637,
        linear_acceleration_noise_mean_z = 0.0,
        linear_acceleration_noise_std_z = 0.00686)
      }}
      <!--}-->

      <!--}-->

    </link>

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': arm_length * math.sin(math.radians(45)),
    'y': -arm_length * math.sin(math.radians(45)),
    'z': rotor_offset_top + prop_offset_top,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'DarkGrey'
    },
    {
    'motor_number': 1,
    'direction': 'ccw',
    'x': -arm_length * math.sin(math.radians(45)),
    'y': arm_length * math.sin(math.radians(45)),
    'z': rotor_offset_top + prop_offset_top,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'DarkGrey'
    },
    {
    'motor_number': 2,
    'direction': 'cw',
    'x': arm_length * math.sin(math.radians(45)),
    'y': arm_length * math.sin(math.radians(45)),
    'z': rotor_offset_top + prop_offset_top,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'DarkGrey'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -arm_length * math.sin(math.radians(45)),
    'y': -arm_length * math.sin(math.radians(45)),
    'z': rotor_offset_top + prop_offset_top,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'DarkGrey'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = prop_radius,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = 0,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ================================================================== #}
    {# ||                 optional sensor definitions                  || #}
    {# ================================================================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = -0.067,
      y = 0,
      z = 0.007,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

  </model>
</sdf>
