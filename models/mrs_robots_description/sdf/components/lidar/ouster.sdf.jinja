<?xml version="1.0"? encoding="utf-8">
{%- import 'mrs_robots_description/sdf/components/generic_components.sdf.jinja' as generic -%}

{# ouster_macro {--> #}
{%- macro ouster_macro(parent_link, sensor_name, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-ouster' -%}
  {%- set spawner_description = 'Add Ouster laser scanner to the vehicle. Select a model to automatically set number of lines, vertical FOV and range. Available models: OS0-32, OS0-64, OS0-128, OS1-16, OS1-32G1, OS1-32, OS1-64, OS1-128, OS2-32, OS2-64, OS2-128' -%}
  {%- set spawner_default_args = {'model': 'OS1-16', 'horizontal_samples': 2048, 'update_rate': 10, 'noise': 0.03, 'use_gpu': false} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {# model selection {--> #}
    {%- set ouster_model = spawner_args[spawner_keyword]['model'] -%}

    {# OS0 {--> #}

    {# OS0-32 #}
    {%- if ouster_model == 'OS0-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# OS0-64 #}
    {%- if ouster_model == 'OS0-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# OS0-128 #}
    {%- if ouster_model == 'OS0-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# OS1 Generation 1 {--> #}
    {# <!-- OS1-16 Generation 1 --> #}
    {%- if ouster_model == 'OS1-16' -%}
      {%- set lasers = 16 -%}
      {%- set vfov_angle = 33.2 -%}
      {%- set range = 120 -%}
    {%- endif -%}
    {# <!--}--> #}

    {# OS1 Generation 2 {--> #}

    {# OS1-32 Generation 2 #}
    {%- if ouster_model == 'OS1-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# OS1-64 Generation 2 #}
    {%- if ouster_model == 'OS1-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# OS1-128 Generation 2 #}
    {%- if ouster_model == 'OS1-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# OS2 {--> #}

    {# OS2-32 #}
    {%- if ouster_model == 'OS2-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# OS2-64 #}
    {%- if ouster_model == 'OS2-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# OS2-128 #}
    {%- if ouster_model == 'OS2-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# <!--}--> #}

    {# The real ouster is transforming lidar data from lidar_frame to sensor_frame directly for user. #}
    {# For simplicity, we are placing sensor_frame to the same place as the lidar_frame is. #}

    {# setup local variables {--> #}

    {# -- gazebo links -- #}
    {%- set sensor_link = sensor_name + '_sensor_link' -%}

    {# -- frame names -- #}
    {%- set frame_fcu = spawner_args['name'] + '/fcu' -%}
    {%- set frame_sensor = spawner_args['name'] + '/' + sensor_name + '_sensor' -%}
    {%- set frame_lidar = spawner_args['name'] + '/' + sensor_name + '_lidar'  -%}
    {%- set frame_imu = spawner_args['name'] + '/' + sensor_name + '_imu'  -%}

    {# -- topics -- #}
    {%- set topic_lidar = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/points' -%}
    {%- set topic_imu = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/imu' -%}
    {%- set topic_diag = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/is_alive' -%}

    {# -- tf from sensor to lidar -- #}
    {%- set lidar_x = 0 -%}
    {%- set lidar_y = 0 -%}
    {%- set lidar_z = 0.0344 -%}
    {%- set lidar_roll = 0 -%}
    {%- set lidar_pitch = 0 -%}
    {%- set lidar_yaw = 0 -%}

    {# -- tf from sensor to imu -- #}
    {%- set imu_x = 0.006253 -%}
    {%- set imu_y = -0.011775 -%}
    {%- set imu_z = 0.007645 -%}
    {%- set imu_roll = 0 -%}
    {%- set imu_pitch = 0 -%}
    {%- set imu_yaw = 0 -%}

    {%- if spawner_args[spawner_keyword]['use_gpu'] -%}
      {%- set ouster_plugin_filename ='libMrsGazeboCommonResources_3DLidarGpuPlugin.so' -%}
      {%- set sensor_type = 'gpu_ray'  -%}
    {%- else -%}
      {%- set ouster_plugin_filename ='libMrsGazeboCommonResources_3DLidarPlugin.so' -%}
      {%- set sensor_type = 'ray'  -%}
    {%- endif -%}

    {# <!--}--> #}

    <!-- Ouster {{ ouster_model }} {-->
    <link name="{{ sensor_link }}">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}

      <!-- visuals {-->
      {{ generic.visual_mesh_macro(
        name = 'base_visual',
        mesh_file = 'model://mrs_robots_description/meshes/sensors/os1_64.dae',
        mesh_scale = '1 1 1',
        color = 'White',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <visual name="window_visual">
        <pose>0 0 {{ lidar_z }} 0 0 </pose>
        <geometry>
          <cylinder>
            <length>0.035</length>
            <radius>0.038</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <!--}-->

      <!-- IMU {-->
      <sensor name="{{ sensor_name }}_imu_sensor" type="imu">
        <pose>{{ imu_x }} {{ imu_y }} {{ imu_z }} {{ imu_roll }} {{ imu_pitch }} {{ imu_yaw }}</pose>
        <gravity>true</gravity>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>false</visualize>
        <topic>__default_topic__</topic>
        <plugin name="{{ sensor_name }}_imu_plugin" filename="libgazebo_ros_imu_sensor.so">
          <robotNamespace></robotNamespace>
          <topicName>{{ topic_imu }}</topicName>
          <bodyName>{{ sensor_link }}</bodyName>
          <updateRateHZ>100</updateRateHZ>
          <gaussianNoise>0.005</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <frameName>{{ frame_imu }}</frameName>
        </plugin>
      </sensor>
      <!--}-->

      <!-- LIDAR {-->
      <sensor name="{{ sensor_name }}_lidar_sensor" type="{{ sensor_type }}">
        <pose>{{ lidar_x }} {{ lidar_y }} {{ lidar_z }} {{ lidar_roll }} {{ lidar_pitch }} {{ lidar_yaw }}</pose>
        <visualize>false</visualize>
        <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>{{ spawner_args[spawner_keyword]['horizontal_samples'] }}</samples>
              <resolution>1</resolution>
              <min_angle>0</min_angle>
              <max_angle>{{ 2*math.pi }}</max_angle>
            </horizontal>
            <vertical>
              <samples>{{ lasers }}</samples>
              <resolution>1</resolution>
              <min_angle>{{ -vfov_angle/2*math.radians(180)/180.0 }}</min_angle>
              <max_angle>{{ vfov_angle/2*math.radians(180)/180.0 }}</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.1</min>
            <max>{{ range }}</max>
            <resolution>0.03</resolution>
          </range>
        </ray>
        <plugin name="{{ sensor_name }}_lidar_plugin" filename="{{ ouster_plugin_filename }}">
          <parentFrameName>{{ frame_fcu }}</parentFrameName>
          <sensorFrameName>{{ frame_sensor }}</sensorFrameName>
          <sensor_x>{{ x + lidar_x }}</sensor_x>
          <sensor_y>{{ y + lidar_y }}</sensor_y>
          <sensor_z>{{ z + lidar_z }}</sensor_z>
          <sensor_roll>{{ roll + lidar_roll }}</sensor_roll>
          <sensor_pitch>{{ pitch + lidar_pitch }}</sensor_pitch>
          <sensor_yaw>{{ yaw + lidar_yaw }}</sensor_yaw>

          <!-- Lidar parameters -->
          <lidarFrameName>{{ frame_lidar }}</lidarFrameName>
          <lidar_x>0</lidar_x>
          <lidar_y>0</lidar_y>
          <lidar_z>0</lidar_z>
          <lidar_roll>0</lidar_roll>
          <lidar_pitch>0</lidar_pitch>
          <lidar_yaw>{{ math.radians(180) }}</lidar_yaw>
          <topicName>{{ topic_lidar }}</topicName>
          <topicDiagName>{{ topic_diag }}</topicDiagName>
          <min_range>0.1</min_range>
          <max_range>{{ range }}</max_range>
          <ordered>true</ordered>
          <gaussianNoise>{{ spawner_args[spawner_keyword]['noise'] }}</gaussianNoise>

          <!-- IMU parameters -->
          <imu>true</imu>
          <imuFrameName>{{ frame_imu }}</imuFrameName>
          <imu_x>{{ imu_x - lidar_x }}</imu_x>
          <imu_y>{{ imu_y - lidar_y }}</imu_y>
          <imu_z>{{ imu_z - lidar_z }}</imu_z>
          <imu_roll>{{ imu_roll - lidar_roll }}</imu_roll>
          <imu_pitch>{{ imu_pitch - lidar_pitch }}</imu_pitch>
          <imu_yaw>{{ imu_yaw - lidar_yaw }}</imu_yaw>
        </plugin>
      </sensor>
      <!--}-->

    </link>

    <joint name="{{ sensor_name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_link }}</child>
    </joint>

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}