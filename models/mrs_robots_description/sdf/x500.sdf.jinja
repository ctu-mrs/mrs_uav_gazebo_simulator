<?xml version="1.0" encoding="utf-8"?>
<sdf version="1.6">

  {%- import 'mrs_robots_description/sdf/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 1.95 -%} {# [kg] #}
  {%- set body_radius = 0.1 -%} {# [m] #}
  {%- set body_height = 0.1 -%} {# [m] #}
  {%- set mass_prop = 0.016076923076923075 -%} {# [kg] #}
  {%- set radius_rotor = 0.1751 -%} {# [m] #}
  {%- set rotor_height = 0.002 -%} {# [m] #}

  {%- set motor_mesh_z_offset = -0.0086 -%} {# [m] #}
  {%- set rotor_xy_offset = 0.1812 -%} {# [m] #}
  {%- set rotor_z_offset = 0.057 -%} {# [m] #}

  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 15 -%} {# slowdown ratio, only affects simulation visuals #}
  {%- set motor_constant = '1.67e-5' -%} {# [N / (rad/s)^2], compute from max desired thurst at max power #}
  {%- set moment_constant = 0.06 -%} {# [m] ratio between rolling/pitching moment and yawing moment, increase for faster yaw #}
  {%- set time_constant_up = 0.0125 -%} {# [s] how fast props gain speed when throttle goes up #}
  {%- set time_constant_down = 0.025 -%} {# [s] how fast props lose speed when throttle goes down #}
  {%- set max_rot_velocity = 1100 -%} {# [rad/s] max real propeller rotation velocity #}

  {# this should only affect agile drones #}
  {%- set rotor_drag_coefficient = '1.0e-4' -%} {# N / (m/s)^2 how much thrust is lost due to air drag #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%} {# N*m / (m/s^2) rolling moment caused by dragging propellers through the air during forward flight #}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.25 -%} {# [m] #}
  {%- set inertia_body_height = 0.05 -%} {# [m] #}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mesh_scale_prop_ccw = '1 1 1' -%}
  {%- set mesh_scale_prop_cw = '-1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Frame parts {--> #}
  {%- set top_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/top_board_mesh_file.dae' -%}
  {%- set bottom_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/bottom_board_mesh_file.dae' -%}
  {%- set arm_carbon_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_carbon_mesh_file.dae' -%}
  {%- set arm_plastic1_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_plastic1_mesh_file.stl' -%}
  {%- set arm_plastic2_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_plastic2_mesh_file.stl' -%}
  {%- set arm_3d_print_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_3d_print_mesh_file.stl' -%}
  {%- set leg_3d_print_mesh_file = 'model://mrs_robots_description/meshes/x500v2/leg_3d_print_mesh_file.stl' -%}
  {# <!--}--> #}

  {# Motors and props {--> #}
  {%- set motor_bottom_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_bottom_mesh_file.stl' -%}
  {%- set motor_middle_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_middle_mesh_file.stl' -%}
  {%- set motor_top_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_top_mesh_file.stl' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/x500v2/prop_mesh_file.dae' -%}
  {# <!--}--> #}

  {# Sensors and computers {--> #}
  {%- set pixhawk6c_mesh_file = 'model://mrs_robots_description/meshes/x500v2/pixhawk6c_mesh_file.stl' -%}
  {%- set gps_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/gps_mount_mesh_file.stl' -%}
  {%- set nuc_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_board_mesh_file.stl' -%}
  {%- set nuc_cooler_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_cooler_mesh_file.stl' -%}
  {# <!--}--> #}

  {# Mounts {--> #}
  {%- set battery_mesh_file = 'model://mrs_robots_description/meshes/x500v2/battery_mesh_file.stl' -%}
  {%- set battery_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/battery_mount_mesh_file.stl' -%}
  {%- set nuc_hex_posts_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_hex_posts_mesh_file.stl' -%}
  {%- set gps_module_mesh_file = 'model://mrs_robots_description/meshes/x500v2/gps_module_mesh_file.stl' -%}
  {%- set garmin_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/garmin_mount_mesh_file.stl' -%}
  {%- set lidar_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/lidar_mount_mesh_file.stl' -%}
  {%- set realsense_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/realsense_mount_mesh_file.stl' -%}
  {%- set bluefox_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/bluefox_mount_mesh_file.stl' -%}
  {%- set uvdar_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_uvdar_mount.dae' -%}
  {%- set qorvo_dw1000_mount_file = 'model://mrs_robots_description/meshes/x500v2/qorvo_dw1000_mount.stl' -%}

  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = mass_prop * ( 3 * radius_rotor * radius_rotor + rotor_height * rotor_height) / 12 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = mass_prop * ( 3 * radius_rotor * radius_rotor + rotor_height * rotor_height) / 12  -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = (mass_prop * radius_rotor * radius_rotor) / 2 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">
    <static>false</static>

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body visuals {-->

      <!-- Boards {-->
      {{ generic.visual_mesh_textured_macro(
        name = 'top_board',
        mesh_file = top_board_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}

      {{ generic.visual_mesh_textured_macro(
        name = 'bottom_board',
        mesh_file = bottom_board_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Arms and legs {-->
      {%- for id in range(0, 4) -%}

        {%- set affix = 'front_right' -%}
        {%- set print_color = 'Black' -%}
        {%- if id == 1 -%}
          {%- set affix = 'front_left' -%}
        {%- endif -%}
        {%- if id == 2 -%}
          {%- set affix = 'back_left' -%}
          {%- set print_color = 'Red' -%}
        {%- endif -%}
        {%- if id == 3 -%}
          {%- set affix = 'back_right' -%}
          {%- set print_color = 'Red' -%}
        {%- endif -%}

        {{ generic.visual_mesh_textured_macro(
          name = 'arm_carbon_' + affix,
          mesh_file = arm_carbon_mesh_file,
          mesh_scale = mesh_scale,
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_mrs_material_macro(
          name = 'arm_plastic1_' + affix,
          mesh_file = arm_plastic1_mesh_file,
          mesh_scale = mesh_scale,
          color = 'X500Blue',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_mrs_material_macro(
          name = 'arm_plastic2_' + affix,
          mesh_file = arm_plastic2_mesh_file,
          mesh_scale = mesh_scale,
          color = 'X500Blue',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_macro(
          name = 'arm_3d_print_' + affix,
          mesh_file = arm_3d_print_mesh_file,
          mesh_scale = mesh_scale,
          color = print_color,
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

      {%- endfor -%}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_front_right',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = 0.13,
        offset_y = -0.13,
        offset_z = -0.07)
      }}

     {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_front_left',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 1.57079633,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = 0.13,
        offset_y = 0.13,
        offset_z = -0.07)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_back_left',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 3.14159266,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = -0.13,
        offset_y = 0.13,
        offset_z = -0.07)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_back_right',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 4.71238899,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = -0.13,
        offset_y = -0.13,
        offset_z = -0.07)
      }}

      <!--}-->

      <!-- Intel nuc {-->
      {{ generic.visual_mesh_macro(
        name = 'nuc_board',
        mesh_file = nuc_board_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grass',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'nuc_cooler',
        mesh_file = nuc_cooler_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'nuc_hex_posts',
        mesh_file = nuc_hex_posts_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Pixhawk {-->
      {{ generic.visual_mesh_macro(
        name = 'pixhawk6c',
        mesh_file = pixhawk6c_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Motors {-->
      {%- set affix = 'front_right' -%}

      {%- for id in range(0, 4) -%}

        {%- if id == 1 -%}
          {%- set affix = 'front_left' -%}
        {%- endif -%}
        {%- if id == 2 -%}
          {%- set affix = 'back_left' -%}
        {%- endif -%}
        {%- if id == 3 -%}
          {%- set affix = 'back_right' -%}
        {%- endif -%}

        {{ generic.visual_mesh_macro(
          name = 'motor_bottom_' + affix,
          mesh_file = motor_bottom_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Grey',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_macro(
          name = 'motor_middle_' + affix,
          mesh_file = motor_middle_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

      {%- endfor -%}
      <!--}-->

      <!-- Battery mount and battery {-->
      {{ generic.visual_mesh_macro(
        name = 'battery_mount',
        mesh_file = battery_mount_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0.001,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'battery',
        mesh_file = battery_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0.001,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      {# GPS antenna and mount {--> #}
      {%- set gps_visuals -%}
      <!-- GPS mount {-->
      {{ generic.visual_link_macro(
        name = 'gps_mount',
        mesh_file = gps_mount_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90),
        parent_link = root)
      }}
      <!--}-->

      <!-- GPS antenna {-->
      {{ generic.visual_link_macro(
        name = 'gps_module',
        mesh_file = gps_module_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90),
        parent_link = root)
      }}
      <!--}-->
      {%- endset -%}
      {# <!--}--> #}

      {# component mounts and holders (these must be passed as args into components, or must be called) {--> #}

      {# garmin down mount {--> #}
      {%- set garmin_down_mount -%}
        {{ generic.visual_link_macro(
          name = 'garmin_mount',
          mesh_file = garmin_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = -0.001,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# lidar mount {--> #}
      {%- set lidar_mount -%}
        {{ generic.visual_link_macro(
          name = 'rplidar_mount',
          mesh_file = lidar_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'FlatBlack',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# realsense mount {--> #}
      {%- set realsense_mount -%}
        {{ generic.visual_link_macro(
          name = 'realsense_mount',
          mesh_file = realsense_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# bluefox mount {--> #}
      {%- set bluefox_mount -%}
        {{ generic.visual_link_macro(
          name = 'bluefox_mount',
          mesh_file = bluefox_mount_mesh_file,
          mesh_scale = mesh_scale_milimeters,
          color = 'FlatBlack',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# uvdar mount {--> #}
      {%- set uvdar_mount -%}
        {{ generic.visual_link_macro(
          name = 'uvdar_mount',
          mesh_file = uvdar_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.027,
          y = 0,
          z = 0.075,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Qorvo DW1000 mount {--> #}
      {%- set qorvo_dw1000_mount -%}
        {{ generic.visual_link_macro(
          name = 'qorvo_dw1000_mount',
          mesh_file = qorvo_dw1000_mount_file,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.0,
          y = -0.01,
          z = -0.078,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# <!--}--> #}

    <!--}-->
    
    <!-- BODY PHYSICS {-->
    {{ generic.multirotor_physics_macro(
      mass = mass,
      body_radius = body_radius,
      body_height = body_height,
      ixx = body_ixx,
      ixy = body_ixy,
      ixz = body_ixz,
      iyy = body_iyy,
      iyz = body_iyz,
      izz = body_izz)
    }}
    <!--}-->

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

      <!-- PX4 sensors {-->

      <!-- barometer {-->
      <!-- Noise modeled after BMP390 -->
      {{ generic.barometer_sensor_macro(
        name = "air_pressure",
        update_rate = 50,
        noise_mean = 0,
        noise_std = 3)
      }}
      <!--}-->

      <!-- magnetometer {-->
      <!-- Noise modeled after IIS2MDC -->
      {{ generic.magnetometer_sensor_macro(
        name = "magnetometer",
        update_rate = 100,
        noise_std_x = 0.0001,
        noise_std_y = 0.0001,
        noise_std_z = 0.0001)
      }}
      <!--}-->

      <!-- GPS {-->
      {{ generic.gps_sensor_macro(
        name = "navsat",
        update_rate = 10)
      }}
      <!--}-->

      <!-- IMU {-->
      <!-- Noise modeled after IIM42653 -->
      {{ generic.imu_sensor_macro(
        name = "imu",
        update_rate = 250,
        angular_velocity_noise_mean_x = 0.0,
        angular_velocity_noise_std_x = 0.0008726646,
        angular_velocity_noise_mean_y = 0.0,
        angular_velocity_noise_std_y = 0.0008726646,
        angular_velocity_noise_mean_z = 0.0,
        angular_velocity_noise_std_z = 0.0008726646,
        linear_acceleration_noise_mean_x = 0.0,
        linear_acceleration_noise_std_x = 0.00637,
        linear_acceleration_noise_mean_y = 0.0,
        linear_acceleration_noise_std_y = 0.00637,
        linear_acceleration_noise_mean_z = 0.0,
        linear_acceleration_noise_std_z = 0.00686)
      }}
      <!--}-->

      <!--}-->

    </link>

    {# ================================================================== #}
    {# ||                 optional sensor definitions                  || #}
    {# ================================================================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0625,
      z = -0.009,
      roll = 0,
      pitch = math.radians(90),
      yaw = math.radians(-90),
      mount = garmin_down_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': rotor_xy_offset,
    'y': -rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 1,
    'direction': 'ccw',
    'x': -rotor_xy_offset,
    'y': rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 2,
    'direction': 'cw',
    'x': rotor_xy_offset,
    'y': rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -rotor_xy_offset,
    'y': -rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = radius_rotor,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = motor_mesh_z_offset,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

  </model>
</sdf>
